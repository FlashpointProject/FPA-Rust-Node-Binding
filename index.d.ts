/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface GameSearch {
  filter: GameFilter
  loadRelations: GameSearchRelations
  order: GameSearchOrder
  offset?: GameSearchOffset
  limit: number
  slim: boolean
  withTagFilter?: Array<string>
}
export interface GameSearchOffset {
  value: string
  title: string
  gameId: string
}
export interface GameSearchOrder {
  column: GameSearchSortable
  direction: GameSearchDirection
}
export const enum GameSearchSortable {
  TITLE = 0,
  RANDOM = 1
}
export const enum GameSearchDirection {
  ASC = 0,
  DESC = 1
}
export interface GameSearchRelations {
  tags: boolean
  platforms: boolean
  gameData: boolean
  addApps: boolean
}
export interface GameFilter {
  subfilters: Array<GameFilter>
  whitelist: FieldFilter
  blacklist: FieldFilter
  exactWhitelist: FieldFilter
  exactBlacklist: FieldFilter
  matchAny: boolean
}
export interface FieldFilter {
  generic?: Array<string>
  library?: Array<string>
  title?: Array<string>
  developer?: Array<string>
  publisher?: Array<string>
  series?: Array<string>
  tags?: Array<string>
  platforms?: Array<string>
}
export interface PageTuple {
  id: string
  orderVal: string
  title: string
}
export interface AdditionalApp {
  id: string
  name: string
  applicationPath: string
  launchCommand: string
  autoRunBefore: boolean
  waitForExit: boolean
  parentGameId: string
}
export interface Game {
  id: string
  library: string
  title: string
  alternateTitles: string
  series: string
  developer: string
  publisher: string
  primaryPlatform: string
  platforms: TagVec
  dateAdded: Date
  dateModified: Date
  detailedPlatforms?: Array<Tag>
  legacyBroken: boolean
  legacyExtreme: boolean
  playMode: string
  status: string
  notes: string
  tags: TagVec
  detailedTags?: Array<Tag>
  source: string
  legacyApplicationPath: string
  legacyLaunchCommand: string
  releaseDate: string
  version: string
  originalDescription: string
  language: string
  activeDataId?: number
  activeDataOnDisk: boolean
  lastPlayed?: Date
  playtime: number
  playCounter: number
  activeGameConfigId?: number
  activeGameConfigOwner?: string
  archiveState: number
  gameData?: Array<GameData>
  addApps?: Array<AdditionalApp>
}
export interface PartialGame {
  id: string
  library?: string
  title?: string
  alternateTitles?: string
  series?: string
  developer?: string
  publisher?: string
  primaryPlatform?: string
  platforms?: TagVec
  dateAdded?: Date
  dateModified?: Date
  legacyBroken?: boolean
  legacyExtreme?: boolean
  playMode?: string
  status?: string
  notes?: string
  tags?: TagVec
  source?: string
  legacyApplicationPath?: string
  legacyLaunchCommand?: string
  releaseDate?: string
  version?: string
  originalDescription?: string
  language?: string
  activeDataId?: number
  activeDataOnDisk?: boolean
  lastPlayed?: Date
  playtime?: number
  activeGameConfigId?: number
  activeGameConfigOwner?: string
  archiveState?: number
  addApps?: Array<AdditionalApp>
}
export interface GameData {
  id: number
  gameId: string
  title: string
  dateAdded: Date
  sha256: string
  crc32: number
  presentOnDisk: boolean
  path?: string
  size: number
  parameters?: string
  applicationPath: string
  launchCommand: string
}
export interface PartialGameData {
  id?: number
  gameId: string
  title?: string
  dateAdded?: Date
  sha256?: string
  crc32?: number
  presentOnDisk?: boolean
  path?: string
  size?: number
  parameters?: string
  applicationPath?: string
  launchCommand?: string
}
export interface Tag {
  id: number
  name: string
  description: string
  dateModified: Date
  aliases: Array<string>
  category?: string
}
export interface PartialTag {
  id: number
  name: string
  description?: string
  dateModified?: Date
  aliases?: Array<string>
  category?: string
}
export interface TagCategory {
  id: number
  name: string
  color: string
  description?: string
}
export interface PartialTagCategory {
  id: number
  name: string
  color: string
  description?: string
}
export function parseUserSearchInput(input: string): GameSearch
export type FlashpointNode = FlashpointArchive
export class FlashpointArchive {
  constructor()
  loadDatabase(source: string): void
  searchGames(search: GameSearch): Promise<Array<Game>>
  searchGamesIndex(search: GameSearch): Promise<Array<PageTuple>>
  searchGamesTotal(search: GameSearch): Promise<number>
  searchGamesWithTag(tag: string): Promise<Array<Game>>
  searchGamesRandom(search: GameSearch, count: number): Promise<Array<Game>>
  findGame(id: string): Promise<Game | null>
  createGame(partialGame: PartialGame): Promise<Game>
  saveGame(partialGame: PartialGame): Promise<Game>
  saveGames(partialGames: Array<PartialGame>): Promise<Array<Game>>
  deleteGame(id: string): Promise<void>
  countGames(): Promise<number>
  findAddAppById(id: string): Promise<AdditionalApp | null>
  findAllTags(): Promise<Array<Tag>>
  findTag(name: string): Promise<Tag | null>
  findTagById(id: number): Promise<Tag | null>
  createTag(name: string, category?: string | undefined | null): Promise<Tag>
  saveTag(partial: PartialTag): Promise<Tag>
  deleteTag(name: string): Promise<void>
  countTags(): Promise<number>
  mergeTags(name: string, mergedInto: string): Promise<Tag>
  findAllPlatforms(): Promise<Array<Tag>>
  findPlatform(name: string): Promise<Tag | null>
  findPlatformById(id: number): Promise<Tag | null>
  createPlatform(name: string): Promise<Tag>
  deletePlatform(name: string): Promise<void>
  countPlatforms(): Promise<number>
  findAllTagCategories(): Promise<Array<TagCategory>>
  findTagCategory(name: string): Promise<TagCategory | null>
  findTagCategoryById(id: number): Promise<TagCategory | null>
  createTagCategory(partial: PartialTagCategory): Promise<TagCategory>
  saveTagCategory(partial: PartialTagCategory): Promise<TagCategory>
  findGameDataById(gameDataId: number): Promise<GameData | null>
  findGameData(gameId: string): Promise<Array<GameData>>
  createGameData(gameData: PartialGameData): Promise<GameData>
  saveGameData(gameData: PartialGameData): Promise<GameData>
  deleteGameData(id: number): Promise<void>
  newTagFilterIndex(search: GameSearch): Promise<void>
  findAllGameLibraries(): Promise<Array<string>>
  addGamePlaytime(id: string, seconds: number): Promise<void>
  clearPlaytimeTracking(): Promise<void>
  optimizeDatabase(): Promise<void>
}

export type TagVec = string[];
